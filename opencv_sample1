package computervision;

import org.opencv.core.CvType;
import org.opencv.core.Mat;
import org.opencv.core.MatOfRect;
import org.opencv.core.Rect;
import org.opencv.core.Scalar;
import org.opencv.core.Size;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.imgproc.Imgproc;
import org.opencv.objdetect.CascadeClassifier;
import org.opencv.objdetect.Objdetect;

public class ComputerVision {

    public static void main(String[] args) throws Exception {
        nu.pattern.OpenCV.loadLocally();
        Mat image = loadImage("src/face1.jpg");

        MatOfRect facesDetected = new MatOfRect();
        CascadeClassifier cascadeClassifier = new CascadeClassifier();
        int minFaceSize = Math.round(image.rows() * 0.1f);
        cascadeClassifier.load("src/haarcascade_frontalface_alt.xml");
        cascadeClassifier.detectMultiScale(image,
                facesDetected,
                1.1,
                3,
                Objdetect.CASCADE_SCALE_IMAGE,
                new Size(minFaceSize, minFaceSize),
                new Size()
        );

        Rect[] facesArray = facesDetected.toArray();
        for (Rect face : facesArray) {
            Imgproc.rectangle(image, face.tl(), face.br(), new Scalar(0, 0, 255), 3);
        }
        //Mat image = createBinaryImage(200,300);
        saveImage(image, "src/face2.jpg");
    }

    public static Mat loadImage(String imagePath) throws Exception {
        Imgcodecs imageCodecs = new Imgcodecs();
        Mat imageMat = imageCodecs.imread(imagePath);
        if (imageMat.empty()) {
            throw new Exception("ERROR: Could not read image " + imagePath + "\n");
        }
        return imageMat;
    }

    public static void saveImage(Mat imageMatrix, String targetPath) {
        Imgcodecs imgcodecs = new Imgcodecs();
        imgcodecs.imwrite(targetPath, imageMatrix);
    }

    public static Mat createBinaryImage(int height, int width) {
        Mat image = Mat.zeros(height, width, CvType.CV_8UC1);
        return image;
    }
}
